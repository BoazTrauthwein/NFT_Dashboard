package application.controller;

import javafx.fxml.FXML;
import javafx.event.ActionEvent;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import org.json.simple.JSONObject;

import application.classes.Collection;



public class DashboardController {
	private static HttpURLConnection conn;
	private boolean isUpload;
	private Collection uploadedCollection;
	
	
	@FXML
	private Label lbl;

    @FXML
    private TableView<Collection> tblView;

	// Event Listener on Button.onAction
	@FXML
	public void myButtonOnAction(ActionEvent event) {
		// TODO Autogenerated
		
		createTableView();
		fillTableItems();
		
		//lbl.setText(getRequest());
		
		
	}
	
	private void fillTableItems()
	{
		String req;
		if (this.isUpload == false)
			req = getRequest();
		else
			req = uploadedCollection.toString();
		
		Object obj = JSONValue.parse(req);
	    JSONArray arr = (JSONArray)obj;
	    
	    int max = 100;
	    int min = 1;
	    
        for (int i = 0; i < 7; i++) {
            String collName = (String)((JSONObject)arr.get(i)).get("symbol");
            int num1 = (int)(Math.random()*(max-min+1)+min); 
            int num2 = (int)(Math.random()*(max-min+1)+min); 
            tblView.getItems().add(new Collection(collName, num1, num2, num1-num2));
            //System.out.println(collName);
        }
	}
	
	private void createTableView()
	{
		TableColumn nameColumn = new TableColumn<Collection, String>("Collection Name");
		nameColumn.setCellValueFactory(new PropertyValueFactory<Collection, String>("name"));
		
		TableColumn openseaSolColumn = new TableColumn<Collection, String>("Open Sea [SOL]");
		openseaSolColumn.setCellValueFactory(new PropertyValueFactory<Collection, String>("openseaSol"));
		
		TableColumn magicEdenSolColumn = new TableColumn<Collection, String>("Magic Eden [SOL]");
		magicEdenSolColumn.setCellValueFactory(new PropertyValueFactory<Collection, String>("magicEdenSol"));
		
		TableColumn diffColumn = new TableColumn<Collection, String>("Diff [%]");
		diffColumn.setCellValueFactory(new PropertyValueFactory<Collection, String>("diff"));
		
		tblView.getColumns().add(nameColumn);
		tblView.getColumns().add(openseaSolColumn);
		tblView.getColumns().add(magicEdenSolColumn);
		tblView.getColumns().add(diffColumn);
		
		tblView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
	}
	
	private String getRequest()
	{
		BufferedReader reader;
        String line;
        StringBuilder responseContent = new StringBuilder();
        try{
            URL url = new URL("https://api-mainnet.magiceden.dev/v2/collections?offset=0&limit=10");
            conn = (HttpURLConnection) url.openConnection();

           
            // Request setup
            conn.setRequestMethod("GET");
            //conn.setConnectTimeout(5000);// 5000 milliseconds = 5 seconds
            //conn.setReadTimeout(5000);

            // Test if the response from the server is successful
            int status = conn.getResponseCode();

            if (status >= 300) {
                reader = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
                while ((line = reader.readLine()) != null) {
                    responseContent.append(line);
                }
                reader.close();
            }
            else {
                reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    responseContent.append(line);
                }
                reader.close();
            }
            //log.info("response code: " + status);
            return responseContent.toString();
        }
        catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            conn.disconnect();
            
        }
        return "";
	}
}
